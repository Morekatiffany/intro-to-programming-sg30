* Recap: Programming
* Basics of Git
What is version control?

** Why is git important to scientists

- Reproducibility
- A way of sharing work/data
- A way of collaborating
- A way of building some pipelines
- Error tracking and recovery
- Publishing and open science
  
** Basic Git commands

Clone an existing repository
: git clone <url>

Save changes to the repository

#+begin_src bash
git add .
git commit -m "first commit"
#+end_src

Current state of the repository

#+begin_src bash
git status
#+end_src

Create a new branch

: git branch <branchname>

List all remote branches

: git branch -a

Delete a branch

: git branch -d <branchname>


For more:

: git help -g

* Basic I/O + Modules in Python
** Python Modules
- Modules are used to cluster related functions/classes together - Think of these like libraries
- Understanding how imports in Python work
- Handy tools to inspect modules/functions:
  - =help(...)=
  - =inspect(...)=
  - =dir(...)=
- Point of research: with "> python 3.11", do we need the "__init__.py"?  Research.  Why?
** I/O
Basic input:

#+begin_src python :results output
name = input("Say your name: ")
print(f"{name=}")
#+end_src

Reading from a file

#+begin_src python :results output
with open("/tmp/test.txt", "r") as _f:
    content = _f.read()
    print(content)

with open("/tmp/test.txt", "w") as _f:
    content = _f.write("This is intro to bio-informatics")
    print(content)
#+end_src

How do you read CSV, TSV, FASTA files (and other file formats really)?

* Basic Regex

Regular expressions are a mini-language for finding patterns in text.
- Match patterns in strings (DNA sequences, protein motifs, file names, etc.)
- Validate inputs (e.g., FASTA headers)
- Extract or replace data automatically

In bioinformatics, regex helps with:
- Searching motifs in sequences (e.g., ATG...TAA)
- Detecting restriction sites (GAATTC)
- Extracting identifiers from file headers

  Find single match:
  #+begin_src python :results output
import re

dna = "ATGCGTAGCTAGTGA"
pattern = "AGCTAG"

match = re.search(pattern, dna)
if match:
    print("Found start codon at position:", match.start())
  #+end_src

  #+RESULTS:
  : Found start codon at position: 6

  Find all matches:
  #+begin_src python :results output

import re

dna = "ATGCGTATGCTTATGATGA"
pattern = "ATG"

matches = re.findall(pattern, dna)
print("Matches:", matches)
print("Count:", len(matches))
  #+end_src

  #+RESULTS:
  : Matches: ['ATG', 'ATG', 'ATG', 'ATG']
  : Count: 4

  Extract sequence IDs:

  #+begin_src python :results output
import re

fasta_header = ">sp|Q9H9K5|ABC_TRANSPORTER_HUMAN ATP-binding cassette transporter OS=Homo sapiens"

pattern = r"^>sp\|([A-Z0-9]+)\|([A-Z_]+)"
match = re.search(pattern, fasta_header)

if match:
    print("Accession:", match.group(1))
    print("Protein name:", match.group(2))
  #+end_src

  #+RESULTS:
  : Accession: Q9H9K5
  : Protein name: ABC_TRANSPORTER_HUMAN

* Practice

Version all your work in git.

1. Write a program that asks for a user’s name and prints a welcome message, e.g.

Welcome Dr. Alice, to Python for Bioinformatics!

2. Nucleotide Counter:
Ask the user for a DNA sequence (string).
Print the number of each nucleotide: A, T, G, C.
Example: Input: ATGCTTGA → Output: A=2, T=3, G=2, C=1

3. Reverse Complement:
Given a DNA string, print it's reverse complement.

4. Extract all the genenames given a file:
#+begin_src txt
gene:BRCA1 organism:Homo sapiens
gene:TP53 organism:Homo sapiens
gene:MT-CO1 organism:Homo sapiens
#+end_src

Ask for the file path, and write your results to it.

Write it out to a different file
Output BRCA1, TP53, MT-CO1


